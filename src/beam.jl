
@doc raw"""
    Œûsum(alm‚ÇÅ, alm‚ÇÇ, w3j‚ÇÅ, w3j‚ÇÇ)

Sum over ``\ell`` and ``m`` of two ``a_{\ell m}`` and nontrivial Wigner-3j vectors. This is 
a step in computing the ``\mathbf{\Xi}`` matrix. The ``\rho`` factors are not 
in this summation, as they can be pulled out.

```math
\begin{aligned}
(\Xi \mathrm{sum}) &= \sum_{\ell^{\prime} m^{\prime}} \,  W_{\ell'}^{\nu_1,\nu_2,s_1,s_2,j_1,j_2} \times \begin{pmatrix} \ell & \ell^{\prime} & \ell^{\prime\prime} \\
     -s_1 & s_1+\nu_1  & -\nu_1 \end{pmatrix} \begin{pmatrix}
     \ell & \ell^{\prime} & \ell^{\prime\prime} \\ -s_2 & s_2+\nu_2  & -\nu_2 \end{pmatrix}
\end{aligned}
```
"""
function Œûsum(W::SpectralVector{T},
              w3j‚ÇÅ::WignerSymbolVector{T, Int},
              w3j‚ÇÇ::WignerSymbolVector{T, Int}) where {T<:Number}

    ‚Ñì_start = max(firstindex(w3j‚ÇÅ), firstindex(w3j‚ÇÇ))
    ‚Ñì_end = min(lastindex(w3j‚ÇÅ), lastindex(w3j‚ÇÇ))
    Œ£ = zero(T)
    @inbounds @simd for ‚Ñì = ‚Ñì_start:‚Ñì_end  # sum over nontrivial Wigner 3j symbols
        Œ£ += W[‚Ñì] * w3j‚ÇÅ[‚Ñì] * w3j‚ÇÇ[‚Ñì]  # accumulate in ‚Ñì. we pull 3j out of m sum
    end
    return Œ£
end

@doc raw"""
    quickpolW(alm‚ÇÅ::Alm{Complex{T}}, alm‚ÇÇ::Alm{Complex{T}})

Computes a scaled spectrum of the scanned pattern.

```math
W_{\ell'}^{\nu_1,\nu_2,s_1,s_2,j_1,j_2} = \sum_{m^\prime=-\ell^\prime}^{\ell^\prime}  \left(_{s_1+\nu_1}\tilde{\omega}^{(j_1)}_{\ell^\prime m^\prime}\right)
    \left(_{s_2+\nu_2}\tilde{\omega}^{(j_2)}_{\ell^\prime m^\prime}\right)^*
```
"""
function quickpolW(alm‚ÇÅ::Alm{Complex{T}}, alm‚ÇÇ::Alm{Complex{T}}) where T<:Number
    mmax = min(alm‚ÇÅ.mmax, alm‚ÇÇ.mmax)
    lmax = min(alm‚ÇÅ.lmax, alm‚ÇÇ.lmax)
    cl = SpectralVector(zeros(T, lmax + 1))
    for ‚Ñì = 0:lmax  # fill in cl for each ‚Ñì
        for m = 1:min(‚Ñì, mmax)  # loop over m (symmetric, but skip m=0)
            index = almIndex(alm‚ÇÅ, ‚Ñì, m)
            cl[‚Ñì] += 2 * real(alm‚ÇÅ.alm[index] * conj(alm‚ÇÇ.alm[index]))
        end
        index0 = almIndex(alm‚ÇÅ, ‚Ñì, 0)  # now do m=0
        cl[‚Ñì] += real(alm‚ÇÅ.alm[index0] * conj(alm‚ÇÇ.alm[index0]))
    end
    return cl
end

# loop over nonzero elements of a banded SpectralArray
function specrowrange(ùöµ::SpectralArray, r)
    start = max(2,BandedMatrices.rowstart(ùöµ.parent,r+1)-1)
    stop = BandedMatrices.rowstop(ùöµ.parent,r+1)-1
    return start:stop
end

@doc raw"""
    quickpolŒû!(ùöµ::AA, ŒΩ‚ÇÅ, ŒΩ‚ÇÇ, s‚ÇÅ, s‚ÇÇ, œâ‚ÇÅ, œâ‚ÇÇ)

This computes the ``\Xi_{\ell^{\prime \prime},\ell}`` matrix. It assumes ``\rho`` has been
absorbed into the ``\omega`` terms.

 - `œâ‚ÇÅ`: effective scan weights with spin s‚ÇÅ + ŒΩ‚ÇÅ
 - `œâ‚ÇÇ`: effective scan weights with spin s‚ÇÇ + ŒΩ‚ÇÇ
"""
function quickpolŒû!(ùöµ::AA, ŒΩ‚ÇÅ, ŒΩ‚ÇÇ, s‚ÇÅ, s‚ÇÇ, œâ‚ÇÅ::Alm, œâ‚ÇÇ::Alm,
                    buf1::Array{Array{T,1},1}, 
                    buf2::Array{Array{T,1},1}) where {T, AA<:SpectralArray{T,2}}
    # make some basic checks
    size(ùöµ,1) != size(ùöµ,2) && throw(ArgumentError("ùöµ is not square."))
    lmax = lastindex(ùöµ,1)  # indexed 0:lmax
    W = quickpolW(œâ‚ÇÅ, œâ‚ÇÇ)

    @qthreads for ‚Ñì‚Ä≥ = 2:lmax
        tid = Threads.threadid()
        buffer1 = buf1[tid]
        buffer2 = buf2[tid]
        for ‚Ñì = specrowrange(ùöµ, ‚Ñì‚Ä≥)
            # wigner families over ‚Ñì‚Ä≤
            wF‚ÇÅ = WignerF(T, ‚Ñì, ‚Ñì‚Ä≥, -s‚ÇÅ, -ŒΩ‚ÇÅ)  # set up the wigner recurrence problem
            wF‚ÇÇ = WignerF(T, ‚Ñì, ‚Ñì‚Ä≥, -s‚ÇÇ, -ŒΩ‚ÇÇ)  # set up the wigner recurrence problem
            bufferview1 = uview(buffer1, 1:length(wF‚ÇÅ.n‚Çò·µ¢‚Çô:wF‚ÇÅ.n‚Çò‚Çê‚Çì))  # preallocated buffer
            bufferview2 = uview(buffer2, 1:length(wF‚ÇÇ.n‚Çò·µ¢‚Çô:wF‚ÇÇ.n‚Çò‚Çê‚Çì))  # preallocated buffer
            w3j‚ÇÅ = WignerSymbolVector(bufferview1, wF‚ÇÅ.n‚Çò·µ¢‚Çô:wF‚ÇÅ.n‚Çò‚Çê‚Çì)
            w3j‚ÇÇ = WignerSymbolVector(bufferview2, wF‚ÇÇ.n‚Çò·µ¢‚Çô:wF‚ÇÇ.n‚Çò‚Çê‚Çì)
            wigner3j_f!(wF‚ÇÅ, w3j‚ÇÅ)  # deposit symbols into buffer
            wigner3j_f!(wF‚ÇÇ, w3j‚ÇÇ)  # deposit symbols into buffer
            ùöµ[‚Ñì‚Ä≥, ‚Ñì] = Œûsum(W, w3j‚ÇÅ, w3j‚ÇÇ)
        end
    end

    sgn = (-1)^(s‚ÇÅ + s‚ÇÇ + ŒΩ‚ÇÅ + ŒΩ‚ÇÇ)
    ùöµ .*= sgn
    return ùöµ
end
function quickpolŒû!(ùöµ::AA, ŒΩ‚ÇÅ, ŒΩ‚ÇÇ, s‚ÇÅ, s‚ÇÇ,
                    œâ‚ÇÅ::Alm, œâ‚ÇÇ::Alm) where {T, AA<:SpectralArray{T,2}, SV<:SpectralVector}
    lmax = lastindex(ùöµ,1)  # indexed 0:lmax
    buf1 = get_thread_buffers(T, 2lmax+1)
    buf2 = get_thread_buffers(T, 2lmax+1)
    quickpolŒû!(ùöµ, ŒΩ‚ÇÅ, ŒΩ‚ÇÇ, s‚ÇÅ, s‚ÇÇ, œâ‚ÇÅ, œâ‚ÇÇ, buf1, buf2)
    return ùöµ
end

@doc raw"""
    k·µ§([T=Float64], u)

Defined only for u ‚àà {-2, 0, 2}.
"""
function k·µ§(T::Type, u)
    if iszero(u)
        return one(T)
    elseif abs(u) == 2
        return T(1//2)
    end

    throw(ArgumentError("Defined only for u ‚àà {-2, 0, 2}."))
end
k·µ§(u) = k·µ§(Float64, u)
