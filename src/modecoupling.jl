
"""
Projector function for TT. Goes into the mode-coupling matrix.
"""
function Œû_TT(W_arr::SpectralVector{T, AA}, 
             w3j¬≤‚ÇÄ‚ÇÄ::WignerSymbolVector{T, Int}, 
             ‚Ñì‚ÇÅ::Int, ‚Ñì‚ÇÇ::Int) where {T, AA}
    Œû = zero(T)
    ‚Ñì‚ÇÉ_start = max(firstindex(w3j¬≤‚ÇÄ‚ÇÄ), firstindex(W_arr))
    ‚Ñì‚ÇÉ_end = min(lastindex(w3j¬≤‚ÇÄ‚ÇÄ), lastindex(W_arr))
    @inbounds @simd for ‚Ñì‚ÇÉ ‚àà ‚Ñì‚ÇÉ_start:‚Ñì‚ÇÉ_end
        Œû += (2‚Ñì‚ÇÉ + 1) * w3j¬≤‚ÇÄ‚ÇÄ[‚Ñì‚ÇÉ] * W_arr[‚Ñì‚ÇÉ]
    end
    return Œû / (4œÄ)
end


"""
Projector function for EE. Goes into the mode-coupling matrix.

Note that w3j¬≤ refers to the square of ( ‚Ñì ‚Ñì‚ÇÇ ‚Ñì‚ÇÉ 0 -2 2 )
"""
function Œû_EE(W_arr::SpectralVector{T, AA}, 
                w3j¬≤‚ÇÇ‚ÇÇ::WignerSymbolVector{T, Int}, 
                ‚Ñì‚ÇÅ::Int, ‚Ñì‚ÇÇ::Int) where {T, AA}
    Œû = zero(T)
    ‚Ñì‚ÇÉ_start = max(firstindex(w3j¬≤‚ÇÇ‚ÇÇ), firstindex(W_arr))
    ‚Ñì‚ÇÉ_end = min(lastindex(w3j¬≤‚ÇÇ‚ÇÇ), lastindex(W_arr))
    if isodd(‚Ñì‚ÇÅ + ‚Ñì‚ÇÇ + ‚Ñì‚ÇÉ_start)
        ‚Ñì‚ÇÉ_start += 1
    end
    @inbounds @simd for ‚Ñì‚ÇÉ ‚àà ‚Ñì‚ÇÉ_start:2:‚Ñì‚ÇÉ_end
        Œû += (2‚Ñì‚ÇÉ + 1) * w3j¬≤‚ÇÇ‚ÇÇ[‚Ñì‚ÇÉ] * W_arr[‚Ñì‚ÇÉ]
    end
    return Œû / (4œÄ)
end


"""
Projector function for TE. Goes into the mode-coupling matrix.

Note that w3j‚ÇÄ‚ÇÄ‚ÇÇ‚ÇÇ refers to ( ‚Ñì ‚Ñì‚ÇÇ ‚Ñì‚ÇÉ 0 0 0 ) √ó ( ‚Ñì ‚Ñì‚ÇÇ ‚Ñì‚ÇÉ 0 -2 2 )
"""
function Œû_TE(W_arr::SpectralVector{T, AA}, 
              w3j‚ÇÄ‚ÇÄ‚ÇÇ‚ÇÇ::WignerSymbolVector{T, Int}, 
              ‚Ñì‚ÇÅ::Int, ‚Ñì‚ÇÇ::Int) where {T, AA}
    Œû = zero(T)
    ‚Ñì‚ÇÉ_start = max(firstindex(w3j‚ÇÄ‚ÇÄ‚ÇÇ‚ÇÇ), firstindex(W_arr))
    ‚Ñì‚ÇÉ_end = min(lastindex(w3j‚ÇÄ‚ÇÄ‚ÇÇ‚ÇÇ), lastindex(W_arr))
    if isodd(‚Ñì‚ÇÅ + ‚Ñì‚ÇÇ + ‚Ñì‚ÇÉ_start)
        ‚Ñì‚ÇÉ_start += 1
    end
    @inbounds @simd for ‚Ñì‚ÇÉ ‚àà ‚Ñì‚ÇÉ_start:2:‚Ñì‚ÇÉ_end
        Œû += (2‚Ñì‚ÇÉ + 1) * w3j‚ÇÄ‚ÇÄ‚ÇÇ‚ÇÇ[‚Ñì‚ÇÉ] * W_arr[‚Ñì‚ÇÉ]
    end
    return Œû / (4œÄ)
end


# inner MCM loop TT
function loop_mcm_TT!(ùêå::SpectralArray{T,2}, ‚Ñì‚Çò‚Çê‚Çì::Integer, 
                      V·µ¢‚±º::SpectralVector{T}) where {T}
    thread_buffers = get_thread_buffers(T, 2‚Ñì‚Çò‚Çê‚Çì+1)
    
    @qthreads for ‚Ñì‚ÇÅ in 2:‚Ñì‚Çò‚Çê‚Çì
        buffer = thread_buffers[Threads.threadid()]
        for ‚Ñì‚ÇÇ in ‚Ñì‚ÇÅ:‚Ñì‚Çò‚Çê‚Çì
            w = WignerF(T, ‚Ñì‚ÇÅ, ‚Ñì‚ÇÇ, 0, 0)  # set up the wigner recurrence
            buffer_view = uview(buffer, 1:length(w.n‚Çò·µ¢‚Çô:w.n‚Çò‚Çê‚Çì))  # preallocated buffer
            w3j¬≤‚ÇÄ‚ÇÄ = WignerSymbolVector(buffer_view, w.n‚Çò·µ¢‚Çô:w.n‚Çò‚Çê‚Çì)
            wigner3j_f!(w, w3j¬≤‚ÇÄ‚ÇÄ)  # deposit symbols into buffer
            w3j¬≤‚ÇÄ‚ÇÄ.symbols .= w3j¬≤‚ÇÄ‚ÇÄ.symbols .^ 2  # square the symbols
            Œû = Œû_TT(V·µ¢‚±º, w3j¬≤‚ÇÄ‚ÇÄ, ‚Ñì‚ÇÅ, ‚Ñì‚ÇÇ)
            ùêå[‚Ñì‚ÇÅ, ‚Ñì‚ÇÇ] = (2‚Ñì‚ÇÇ + 1) * Œû
            ùêå[‚Ñì‚ÇÇ, ‚Ñì‚ÇÅ] = (2‚Ñì‚ÇÅ + 1) * Œû
        end
    end
    ùêå[0,0] = one(T)
    ùêå[1,1] = one(T)
    return ùêå
end

function compute_mcm_TT(workspace::SpectralWorkspace{T}, 
                        name_i::String, name_j::String; ‚Ñì‚Çò‚Çê‚Çì::Int=0) where {T}
    ‚Ñì‚Çò‚Çê‚Çì = iszero(‚Ñì‚Çò‚Çê‚Çì) ? workspace.‚Ñì‚Çò‚Çê‚Çì : ‚Ñì‚Çò‚Çê‚Çì
    V·µ¢‚±º = SpectralVector(alm2cl(workspace.mask_alm[name_i, TT], workspace.mask_alm[name_j, TT]))
    ùêå = SpectralArray(zeros(T, (‚Ñì‚Çò‚Çê‚Çì+1, ‚Ñì‚Çò‚Çê‚Çì+1)))
    return loop_mcm_TT!(ùêå, ‚Ñì‚Çò‚Çê‚Çì, V·µ¢‚±º)
end


# inner MCM loop
function loop_mcm_EE!(ùêå::SpectralArray{T,2}, ‚Ñì‚Çò‚Çê‚Çì::Integer, 
                      V·µ¢‚±º::SpectralVector{T}) where {T}
    thread_buffers = get_thread_buffers(T, 2‚Ñì‚Çò‚Çê‚Çì+1)
    
    @qthreads for ‚Ñì‚ÇÅ in 2:‚Ñì‚Çò‚Çê‚Çì
        buffer = thread_buffers[Threads.threadid()]
        for ‚Ñì‚ÇÇ in ‚Ñì‚ÇÅ:‚Ñì‚Çò‚Çê‚Çì
            w = WignerF(T, ‚Ñì‚ÇÅ, ‚Ñì‚ÇÇ, -2, 2)  # set up the wigner recurrence
            buffer_view = uview(buffer, 1:length(w.n‚Çò·µ¢‚Çô:w.n‚Çò‚Çê‚Çì))  # preallocated buffer
            w3j¬≤‚ÇÇ‚ÇÇ = WignerSymbolVector(buffer_view, w.n‚Çò·µ¢‚Çô:w.n‚Çò‚Çê‚Çì)
            wigner3j_f!(w, w3j¬≤‚ÇÇ‚ÇÇ)  # deposit symbols into buffer
            w3j¬≤‚ÇÇ‚ÇÇ.symbols .= w3j¬≤‚ÇÇ‚ÇÇ.symbols .^ 2  # square the symbols
            Œû = Œû_EE(V·µ¢‚±º, w3j¬≤‚ÇÇ‚ÇÇ, ‚Ñì‚ÇÅ, ‚Ñì‚ÇÇ)
            ùêå[‚Ñì‚ÇÅ, ‚Ñì‚ÇÇ] = (2‚Ñì‚ÇÇ + 1) * Œû
            ùêå[‚Ñì‚ÇÇ, ‚Ñì‚ÇÅ] = (2‚Ñì‚ÇÅ + 1) * Œû
        end
    end
    ùêå[0,0] = one(T)
    ùêå[1,1] = one(T)
    return ùêå
end

function compute_mcm_EE(workspace::SpectralWorkspace{T}, 
                     name_i::String, name_j::String; ‚Ñì‚Çò‚Çê‚Çì::Int=0) where {T}
    
    ‚Ñì‚Çò‚Çê‚Çì = iszero(‚Ñì‚Çò‚Çê‚Çì) ? workspace.‚Ñì‚Çò‚Çê‚Çì : ‚Ñì‚Çò‚Çê‚Çì
    V·µ¢‚±º = SpectralVector(alm2cl(
        workspace.mask_alm[name_i, PP], 
        workspace.mask_alm[name_j, PP]))
    ùêå = SpectralArray(zeros(T, (‚Ñì‚Çò‚Çê‚Çì+1, ‚Ñì‚Çò‚Çê‚Çì+1)))
    return loop_mcm_EE!(ùêå, ‚Ñì‚Çò‚Çê‚Çì, V·µ¢‚±º)
end


## TE
# inner MCM loop
function loop_mcm_TE!(ùêå::SpectralArray{T,2}, ‚Ñì‚Çò‚Çê‚Çì::Integer, 
                      thread_buffers_0, thread_buffers_2,
                      V·µ¢‚±º::SpectralVector{T}) where {T}
    
    @qthreads for ‚Ñì‚ÇÅ in 2:‚Ñì‚Çò‚Çê‚Çì
        buffer0 = thread_buffers_0[Threads.threadid()]
        buffer2 = thread_buffers_2[Threads.threadid()]

        for ‚Ñì‚ÇÇ in ‚Ñì‚ÇÅ:‚Ñì‚Çò‚Çê‚Çì
            w‚ÇÄ‚ÇÄ = WignerF(T, ‚Ñì‚ÇÅ, ‚Ñì‚ÇÇ, 0, 0)  # set up the wigner recurrence
            w‚ÇÇ‚ÇÇ = WignerF(T, ‚Ñì‚ÇÅ, ‚Ñì‚ÇÇ, -2, 2)  # set up the wigner recurrence
            buffer_view_0 = uview(buffer0, 1:(w‚ÇÄ‚ÇÄ.n‚Çò‚Çê‚Çì - w‚ÇÄ‚ÇÄ.n‚Çò·µ¢‚Çô + 1))  # preallocated buffer
            buffer_view_2 = uview(buffer2, 1:(w‚ÇÇ‚ÇÇ.n‚Çò‚Çê‚Çì - w‚ÇÇ‚ÇÇ.n‚Çò·µ¢‚Çô + 1))  # preallocated buffer
            w3j‚ÇÄ‚ÇÄ = WignerSymbolVector(buffer_view_0, w‚ÇÄ‚ÇÄ.n‚Çò·µ¢‚Çô:w‚ÇÄ‚ÇÄ.n‚Çò‚Çê‚Çì)
            w3j‚ÇÇ‚ÇÇ = WignerSymbolVector(buffer_view_2, w‚ÇÇ‚ÇÇ.n‚Çò·µ¢‚Çô:w‚ÇÇ‚ÇÇ.n‚Çò‚Çê‚Çì)
            wigner3j_f!(w‚ÇÄ‚ÇÄ, w3j‚ÇÄ‚ÇÄ)  # deposit symbols into buffer
            wigner3j_f!(w‚ÇÇ‚ÇÇ, w3j‚ÇÇ‚ÇÇ)  # deposit symbols into buffer

            w3j‚ÇÄ‚ÇÄ‚ÇÇ‚ÇÇ = w3j‚ÇÄ‚ÇÄ
            w3j‚ÇÄ‚ÇÄ‚ÇÇ‚ÇÇ.symbols .*= w3j‚ÇÇ‚ÇÇ.symbols
            Œû = Œû_TE(V·µ¢‚±º, w3j‚ÇÄ‚ÇÄ‚ÇÇ‚ÇÇ, ‚Ñì‚ÇÅ, ‚Ñì‚ÇÇ)
            ùêå[‚Ñì‚ÇÅ, ‚Ñì‚ÇÇ] = (2‚Ñì‚ÇÇ + 1) * Œû
            ùêå[‚Ñì‚ÇÇ, ‚Ñì‚ÇÅ] = (2‚Ñì‚ÇÅ + 1) * Œû

        end
    end
    ùêå[0,0] = one(T)
    ùêå[1,1] = one(T)
    return ùêå
end

function compute_mcm_TE(workspace::SpectralWorkspace{T}, 
                     name_i::String, name_j::String; ‚Ñì‚Çò‚Çê‚Çì::Int=0) where {T}
    
    ‚Ñì‚Çò‚Çê‚Çì = iszero(‚Ñì‚Çò‚Çê‚Çì) ? workspace.‚Ñì‚Çò‚Çê‚Çì : ‚Ñì‚Çò‚Çê‚Çì
    thread_buffers_0 = get_thread_buffers(T, 2‚Ñì‚Çò‚Çê‚Çì+1)
    thread_buffers_2 = get_thread_buffers(T, 2‚Ñì‚Çò‚Çê‚Çì+1)

    V·µ¢‚±º = SpectralVector(alm2cl(
        workspace.mask_alm[name_i, TT], 
        workspace.mask_alm[name_j, PP]))
    ùêå = SpectralArray(zeros(T, (‚Ñì‚Çò‚Çê‚Çì+1, ‚Ñì‚Çò‚Çê‚Çì+1)))
    return loop_mcm_TE!(ùêå, ‚Ñì‚Çò‚Çê‚Çì, thread_buffers_0, thread_buffers_2, V·µ¢‚±º)
end

function compute_mcm_ET(workspace::SpectralWorkspace{T}, 
                     name_i::String, name_j::String; ‚Ñì‚Çò‚Çê‚Çì::Int=0) where {T}
    
    ‚Ñì‚Çò‚Çê‚Çì = iszero(‚Ñì‚Çò‚Çê‚Çì) ? workspace.‚Ñì‚Çò‚Çê‚Çì : ‚Ñì‚Çò‚Çê‚Çì
    thread_buffers_0 = get_thread_buffers(T, 2‚Ñì‚Çò‚Çê‚Çì+1)
    thread_buffers_2 = get_thread_buffers(T, 2‚Ñì‚Çò‚Çê‚Çì+1)

    V·µ¢‚±º = SpectralVector(alm2cl(
        workspace.mask_alm[name_i, PP], 
        workspace.mask_alm[name_j, TT]))
    ùêå = SpectralArray(zeros(T, (‚Ñì‚Çò‚Çê‚Çì+1, ‚Ñì‚Çò‚Çê‚Çì+1)))
    return loop_mcm_TE!(ùêå, ‚Ñì‚Çò‚Çê‚Çì, thread_buffers_0, thread_buffers_2, V·µ¢‚±º)
end


"""
Compute a mode-coupling matrix.
"""
function mcm(workspace::SpectralWorkspace{T}, spec::MapType, f1_name::String, f2_name::String) where {T}
    if spec == TT
        return compute_mcm_TT(workspace, f1_name, f2_name)
    elseif spec == TE
        return compute_mcm_TE(workspace, f1_name, f2_name)
    elseif spec == ET
        return compute_mcm_ET(workspace, f1_name, f2_name)
    elseif spec == EE
        return compute_mcm_EE(workspace, f1_name, f2_name)
    else
        throw(ArgumentError("Spectrum requested is not yet implemented."))
    end
end
function mcm(workspace::SpectralWorkspace{T}, spec::MapType, 
             f1::PolarizedField{T}, f2::PolarizedField{T}) where {T}
    return mcm(workspace, spec, f1.name, f2.name)
end
function mcm(spec::MapType, f1::PolarizedField{T}, f2::PolarizedField{T}) where {T}
    workspace = SpectralWorkspace(f1, f2)
    return mcm(workspace, spec, f1, f2)
end


function spectra_from_masked_maps(map_1::Map{T}, map_2::Map{T}, 
                         factorized_mcm,
                         B‚Ñì_1::SpectralVector{T}, B‚Ñì_2::SpectralVector{T}) where T
    Cl_hat = alm2cl(map2alm(map_1), map2alm(map_2))
    Cl_hat[1:2] .= zero(T)  # set monopole and dipole to zero
    ldiv!(factorized_mcm, Cl_hat)
    return Cl_hat ./ (B‚Ñì_1.parent .* B‚Ñì_2.parent)
end


function spectra_from_masked_maps(
        alm_1::Alm{Complex{T},Array{Complex{T},1}}, alm_2::Alm{Complex{T},Array{Complex{T},1}}, 
        factorized_mcm,
        B‚Ñì_1::SpectralVector{T}, B‚Ñì_2::SpectralVector{T}) where T
    Cl_hat = alm2cl(alm_1, alm_2)
    Cl_hat[1:2] .= zero(T)  # set monopole and dipole to zero
    ldiv!(factorized_mcm, Cl_hat)
    return Cl_hat ./ (B‚Ñì_1.parent .* B‚Ñì_2.parent)
end

