
"""
    decouple_covmat(Y, B1, B2; lmin1=2, lmin2=2)

Decouples a covariance matrix Y, performing B‚ÇÅ‚Åª¬π √ó M √ó (B‚ÇÇ‚Åª¬π)^‚Ä†
by mutating M. Zeros out ‚Ñì‚ÇÅ, ‚Ñì‚ÇÇ within BOTH lmin1 and lmin2 (i.e the corner).
"""
function decouple_covmat(Y::SA, B1::SA, B2::SA; lmin1=2, lmin2=2) where {T, SA <: SpectralArray{T,2}}
    M = deepcopy(Y)
    M[0:(lmin1-1), 0:(lmin2-1)] .= zero(T)
    C = M.parent
    rdiv!(C', lu(B1.parent'))
    rdiv!(C, lu(B2.parent'))
    return M
end

# convenience
function coupled_covmat(ch1::Symbol, ch2::Symbol, workspace::CovarianceWorkspace{T},
                        spectra, noise_ratios::Dict=Dict(), lmax=0) where T

    lmax = iszero(lmax) ? workspace.lmax : lmax
    if length(noise_ratios) == 0  # by default, do not rescale for noise
        identity_spectrum = SpectralVector(ones(lmax+1))
        noise_ratios = DefaultDict(identity_spectrum)
    end
    if (ch1==:TT) && (ch2==:TT)
        return compute_coupled_covmat_TTTT(workspace, spectra, noise_ratios; lmax=lmax)
    elseif (ch1==:EE) && (ch2==:EE)
        return compute_coupled_covmat_EEEE(workspace, spectra, noise_ratios; lmax=lmax)
    elseif (ch1==:TE) && (ch2==:TE)
        return compute_coupled_covmat_TETE(workspace, spectra, noise_ratios; lmax=lmax)
    elseif (ch1==:TT) && ( ch2==:TE)
        return compute_coupled_covmat_TTTE(workspace, spectra, noise_ratios; lmax=lmax)
    elseif (ch1==:TT) && ( ch2==:EE)
        return compute_coupled_covmat_TTEE(workspace, spectra, noise_ratios; lmax=lmax)
    elseif (ch1==:TE) && (ch2==:EE)
        return compute_coupled_covmat_TEEE(workspace, spectra, noise_ratios; lmax=lmax)
    end
    print("SOMETHING HAS GONE WRONG $(ch1) $(ch2)")
end

function compute_coupled_covmat_TTTT(workspace::CovarianceWorkspace{T}, spectra,
                                     noise_ratios; lmax=0) where {T <: Real}

    lmax = iszero(lmax) ? workspace.lmax : lmax
    i, j, p, q = workspace.field_names

    r_‚Ñì_ip = noise_ratios[:TT, i, p]
    r_‚Ñì_jq = noise_ratios[:TT, j, q]
    r_‚Ñì_iq = noise_ratios[:TT, i, q]
    r_‚Ñì_jp = noise_ratios[:TT, j, p]

    ùêÇ = SpectralArray(zeros(T, (lmax+1, lmax+1)))
    loop_covTTTT!(ùêÇ, lmax,
        spectra[:TT,i,p], spectra[:TT,j,q], spectra[:TT,i,q], spectra[:TT,j,p],
        r_‚Ñì_ip, r_‚Ñì_jq, r_‚Ñì_iq, r_‚Ñì_jp,
        window_function_W!(workspace, :‚àÖ‚àÖ, :‚àÖ‚àÖ, i, p, :TT, j, q, :TT),
        window_function_W!(workspace, :‚àÖ‚àÖ, :‚àÖ‚àÖ, i, q, :TT, j, p, :TT),
        window_function_W!(workspace, :‚àÖ‚àÖ, :TT, i, p, :TT, j, q, :TT),
        window_function_W!(workspace, :‚àÖ‚àÖ, :TT, j, q, :TT, i, p, :TT),
        window_function_W!(workspace, :‚àÖ‚àÖ, :TT, i, q, :TT, j, p, :TT),
        window_function_W!(workspace, :‚àÖ‚àÖ, :TT, j, p, :TT, i, q, :TT),
        window_function_W!(workspace, :TT, :TT, i, p, :TT, j, q, :TT),
        window_function_W!(workspace, :TT, :TT, i, q, :TT, j, p, :TT))

    return ùêÇ
end


# inner loop
function loop_covTTTT!(ùêÇ::SpectralArray{T,2}, lmax::Integer,
                       TTip::SpectralVector{T}, TTjq::SpectralVector{T},
                       TTiq::SpectralVector{T}, TTjp::SpectralVector{T},
                       r_‚Ñì_ip::SpectralVector{T}, r_‚Ñì_jq::SpectralVector{T},
                       r_‚Ñì_iq::SpectralVector{T}, r_‚Ñì_jp::SpectralVector{T},
                       W1, W2, W3, W4, W5, W6, W7, W8) where {T}

    thread_buffers = get_thread_buffers(T, 2 * lmax + 1)

    @qthreads for ‚Ñì‚ÇÅ in 2:lmax
        buffer = thread_buffers[Threads.threadid()]
        for ‚Ñì‚ÇÇ in ‚Ñì‚ÇÅ:lmax
            w = WignerF(T, ‚Ñì‚ÇÅ, ‚Ñì‚ÇÇ, 0, 0)  # set up the wigner recurrence
            buffer_view = uview(buffer, 1:length(w.n‚Çò·µ¢‚Çô:w.n‚Çò‚Çê‚Çì))  # preallocated buffer
            w3j¬≤ = WignerSymbolVector(buffer_view, w.n‚Çò·µ¢‚Çô:w.n‚Çò‚Çê‚Çì)
            wigner3j_f!(w, w3j¬≤)  # deposit symbols into buffer
            w3j¬≤.symbols .= w3j¬≤.symbols .^ 2  # square the symbols
            ùêÇ[‚Ñì‚ÇÅ, ‚Ñì‚ÇÇ] = (
                sqrt(TTip[‚Ñì‚ÇÅ] * TTip[‚Ñì‚ÇÇ] * TTjq[‚Ñì‚ÇÅ] * TTjq[‚Ñì‚ÇÇ]) * Œû_TT(W1, w3j¬≤, ‚Ñì‚ÇÅ, ‚Ñì‚ÇÇ) +
                sqrt(TTiq[‚Ñì‚ÇÅ] * TTiq[‚Ñì‚ÇÇ] * TTjp[‚Ñì‚ÇÅ] * TTjp[‚Ñì‚ÇÇ]) * Œû_TT(W2, w3j¬≤, ‚Ñì‚ÇÅ, ‚Ñì‚ÇÇ) +
                sqrt(TTip[‚Ñì‚ÇÅ] * TTip[‚Ñì‚ÇÇ]) * Œû_TT(W3, w3j¬≤, ‚Ñì‚ÇÅ, ‚Ñì‚ÇÇ) * r_‚Ñì_jq[‚Ñì‚ÇÅ] * r_‚Ñì_jq[‚Ñì‚ÇÇ] +
                sqrt(TTjq[‚Ñì‚ÇÅ] * TTjq[‚Ñì‚ÇÇ]) * Œû_TT(W4, w3j¬≤, ‚Ñì‚ÇÅ, ‚Ñì‚ÇÇ) * r_‚Ñì_ip[‚Ñì‚ÇÅ] * r_‚Ñì_ip[‚Ñì‚ÇÇ] +
                sqrt(TTiq[‚Ñì‚ÇÅ] * TTiq[‚Ñì‚ÇÇ]) * Œû_TT(W5, w3j¬≤, ‚Ñì‚ÇÅ, ‚Ñì‚ÇÇ) * r_‚Ñì_jp[‚Ñì‚ÇÅ] * r_‚Ñì_jp[‚Ñì‚ÇÇ]  +
                sqrt(TTjp[‚Ñì‚ÇÅ] * TTjp[‚Ñì‚ÇÇ]) * Œû_TT(W6, w3j¬≤, ‚Ñì‚ÇÅ, ‚Ñì‚ÇÇ) * r_‚Ñì_iq[‚Ñì‚ÇÅ] * r_‚Ñì_iq[‚Ñì‚ÇÇ]  +
                Œû_TT(W7, w3j¬≤, ‚Ñì‚ÇÅ, ‚Ñì‚ÇÇ) * r_‚Ñì_ip[‚Ñì‚ÇÅ] * r_‚Ñì_jq[‚Ñì‚ÇÅ] * r_‚Ñì_ip[‚Ñì‚ÇÇ] * r_‚Ñì_jq[‚Ñì‚ÇÇ] +
                Œû_TT(W8, w3j¬≤, ‚Ñì‚ÇÅ, ‚Ñì‚ÇÇ) * r_‚Ñì_iq[‚Ñì‚ÇÅ] * r_‚Ñì_jp[‚Ñì‚ÇÅ] * r_‚Ñì_iq[‚Ñì‚ÇÇ] * r_‚Ñì_jp[‚Ñì‚ÇÇ])
            ùêÇ[‚Ñì‚ÇÇ, ‚Ñì‚ÇÅ] = ùêÇ[‚Ñì‚ÇÅ, ‚Ñì‚ÇÇ]
        end
    end
end


function compute_coupled_covmat_EEEE(workspace::CovarianceWorkspace{T}, spectra,
                                     noise_ratios; lmax=0) where {T <: Real}

    lmax = iszero(lmax) ? workspace.lmax : lmax
    i, j, p, q = workspace.field_names

    r_‚Ñì_ip = noise_ratios[:EE, i, p]
    r_‚Ñì_jq = noise_ratios[:EE, j, q]
    r_‚Ñì_iq = noise_ratios[:EE, i, q]
    r_‚Ñì_jp = noise_ratios[:EE, j, p]

    ùêÇ = SpectralArray(zeros(T, (lmax+1, lmax+1)))
    loop_covEEEE!(ùêÇ, lmax,
        spectra[:EE,i,p], spectra[:EE,j,q], spectra[:EE,i,q], spectra[:EE,j,p],
        r_‚Ñì_ip, r_‚Ñì_jq, r_‚Ñì_iq, r_‚Ñì_jp,
        window_function_W!(workspace, :‚àÖ‚àÖ, :‚àÖ‚àÖ, i, p, :PP, j, q, :PP),
        window_function_W!(workspace, :‚àÖ‚àÖ, :‚àÖ‚àÖ, i, q, :PP, j, p, :PP),
        window_function_W!(workspace, :‚àÖ‚àÖ, :PP, i, p, :PP, j, q, :PP),
        window_function_W!(workspace, :‚àÖ‚àÖ, :PP, j, q, :PP, i, p, :PP),
        window_function_W!(workspace, :‚àÖ‚àÖ, :PP, i, q, :PP, j, p, :PP),
        window_function_W!(workspace, :‚àÖ‚àÖ, :PP, j, p, :PP, i, q, :PP),
        window_function_W!(workspace, :PP, :PP, i, p, :PP, j, q, :PP),
        window_function_W!(workspace, :PP, :PP, i, q, :PP, j, p, :PP))

    return ùêÇ
end


# inner loop
function loop_covEEEE!(ùêÇ::SpectralArray{T,2}, lmax::Integer,
                       EEip::SpectralVector{T}, EEjq::SpectralVector{T},
                       EEiq::SpectralVector{T}, EEjp::SpectralVector{T},
                       r_‚Ñì_ip::SpectralVector{T}, r_‚Ñì_jq::SpectralVector{T},
                       r_‚Ñì_iq::SpectralVector{T}, r_‚Ñì_jp::SpectralVector{T},
                       W1, W2, W3, W4, W5, W6, W7, W8) where {T}

    thread_buffers = get_thread_buffers(T, 2 * lmax + 1)

    @qthreads for ‚Ñì‚ÇÅ in 2:lmax
        buffer = thread_buffers[Threads.threadid()]
        for ‚Ñì‚ÇÇ in ‚Ñì‚ÇÅ:lmax
            w = WignerF(T, ‚Ñì‚ÇÅ, ‚Ñì‚ÇÇ, -2, 2)  # set up the wigner recurrence
            buffer_view = uview(buffer, 1:length(w.n‚Çò·µ¢‚Çô:w.n‚Çò‚Çê‚Çì))  # preallocated buffer
            w3j¬≤ = WignerSymbolVector(buffer_view, w.n‚Çò·µ¢‚Çô:w.n‚Çò‚Çê‚Çì)
            wigner3j_f!(w, w3j¬≤)  # deposit symbols into buffer
            w3j¬≤.symbols .= w3j¬≤.symbols .^ 2  # square the symbols
            ùêÇ[‚Ñì‚ÇÅ, ‚Ñì‚ÇÇ] = (
                sqrt(EEip[‚Ñì‚ÇÅ] * EEip[‚Ñì‚ÇÇ] * EEjq[‚Ñì‚ÇÅ] * EEjq[‚Ñì‚ÇÇ]) * Œû_EE(W1, w3j¬≤, ‚Ñì‚ÇÅ, ‚Ñì‚ÇÇ) +
                sqrt(EEiq[‚Ñì‚ÇÅ] * EEiq[‚Ñì‚ÇÇ] * EEjp[‚Ñì‚ÇÅ] * EEjp[‚Ñì‚ÇÇ]) * Œû_EE(W2, w3j¬≤, ‚Ñì‚ÇÅ, ‚Ñì‚ÇÇ) +
                sqrt(EEip[‚Ñì‚ÇÅ] * EEip[‚Ñì‚ÇÇ]) * Œû_EE(W3, w3j¬≤, ‚Ñì‚ÇÅ, ‚Ñì‚ÇÇ) * r_‚Ñì_jq[‚Ñì‚ÇÅ] * r_‚Ñì_jq[‚Ñì‚ÇÇ] +
                sqrt(EEjq[‚Ñì‚ÇÅ] * EEjq[‚Ñì‚ÇÇ]) * Œû_EE(W4, w3j¬≤, ‚Ñì‚ÇÅ, ‚Ñì‚ÇÇ) * r_‚Ñì_ip[‚Ñì‚ÇÅ] * r_‚Ñì_ip[‚Ñì‚ÇÇ] +
                sqrt(EEiq[‚Ñì‚ÇÅ] * EEiq[‚Ñì‚ÇÇ]) * Œû_EE(W5, w3j¬≤, ‚Ñì‚ÇÅ, ‚Ñì‚ÇÇ) * r_‚Ñì_jp[‚Ñì‚ÇÅ] * r_‚Ñì_jp[‚Ñì‚ÇÇ] +
                sqrt(EEjp[‚Ñì‚ÇÅ] * EEjp[‚Ñì‚ÇÇ]) * Œû_EE(W6, w3j¬≤, ‚Ñì‚ÇÅ, ‚Ñì‚ÇÇ) * r_‚Ñì_iq[‚Ñì‚ÇÅ] * r_‚Ñì_iq[‚Ñì‚ÇÇ] +
                Œû_EE(W7, w3j¬≤, ‚Ñì‚ÇÅ, ‚Ñì‚ÇÇ) * r_‚Ñì_ip[‚Ñì‚ÇÅ] * r_‚Ñì_jq[‚Ñì‚ÇÅ] * r_‚Ñì_ip[‚Ñì‚ÇÇ] * r_‚Ñì_jq[‚Ñì‚ÇÇ] +
                Œû_EE(W8, w3j¬≤, ‚Ñì‚ÇÅ, ‚Ñì‚ÇÇ) * r_‚Ñì_iq[‚Ñì‚ÇÅ] * r_‚Ñì_jp[‚Ñì‚ÇÅ] * r_‚Ñì_iq[‚Ñì‚ÇÇ] * r_‚Ñì_jp[‚Ñì‚ÇÇ])
            ùêÇ[‚Ñì‚ÇÇ, ‚Ñì‚ÇÅ] = ùêÇ[‚Ñì‚ÇÅ, ‚Ñì‚ÇÇ]
        end
    end
end


function compute_coupled_covmat_TTTE(workspace::CovarianceWorkspace{T}, spectra,
                                     noise_ratios; lmax=0) where {T <: Real}

    lmax = iszero(lmax) ? workspace.lmax : lmax
    i, j, p, q = workspace.field_names
    W = workspace.W_spectra

    r_‚Ñì_ip = noise_ratios[:TT, i, p]
    r_‚Ñì_jp = noise_ratios[:TT, j, p]

    ùêÇ = SpectralArray(zeros(T, (lmax+1, lmax+1)))
    loop_covTTTE!(ùêÇ, lmax,
        spectra[:TT,i,p], spectra[:TT,j,p], spectra[:TE,i,q], spectra[:TE,j,q],
        r_‚Ñì_ip, r_‚Ñì_jp,
        window_function_W!(workspace, :‚àÖ‚àÖ, :‚àÖ‚àÖ, i, p, :TT, j, q, :TP),
        window_function_W!(workspace, :‚àÖ‚àÖ, :‚àÖ‚àÖ, i, q, :TP, j, p, :TT),
        window_function_W!(workspace, :‚àÖ‚àÖ, :TT, j, q, :TP, i, p, :TT),
        window_function_W!(workspace, :‚àÖ‚àÖ, :TT, i, q, :TP, j, p, :TT))

    return ùêÇ
end


# inner loop
function loop_covTTTE!(ùêÇ::SpectralArray{T,2}, lmax::Integer,
                       TTip::SpectralVector{T}, TTjp::SpectralVector{T},
                       TEiq::SpectralVector{T}, TEjq::SpectralVector{T},
                       r_‚Ñì_ip::SpectralVector{T}, r_‚Ñì_jp::SpectralVector{T},
                       W1, W2, W3, W4) where {T}

    thread_buffers = get_thread_buffers(T, 2 * lmax + 1)

    @qthreads for ‚Ñì‚ÇÅ in 2:lmax
        buffer = thread_buffers[Threads.threadid()]
        for ‚Ñì‚ÇÇ in ‚Ñì‚ÇÅ:lmax
            w = WignerF(T, ‚Ñì‚ÇÅ, ‚Ñì‚ÇÇ, 0, 0)  # set up the wigner recurrence
            buffer_view = uview(buffer, 1:length(w.n‚Çò·µ¢‚Çô:w.n‚Çò‚Çê‚Çì))  # preallocated buffer
            w3j¬≤ = WignerSymbolVector(buffer_view, w.n‚Çò·µ¢‚Çô:w.n‚Çò‚Çê‚Çì)
            wigner3j_f!(w, w3j¬≤)  # deposit symbols into buffer
            w3j¬≤.symbols .= w3j¬≤.symbols .^ 2  # square the symbols
            ùêÇ[‚Ñì‚ÇÅ, ‚Ñì‚ÇÇ] = (
                sqrt(TTip[‚Ñì‚ÇÅ] * TTip[‚Ñì‚ÇÇ]) * (TEjq[‚Ñì‚ÇÅ] + TEjq[‚Ñì‚ÇÇ]) * Œû_TT(W1, w3j¬≤, ‚Ñì‚ÇÅ, ‚Ñì‚ÇÇ) +
                sqrt(TTjp[‚Ñì‚ÇÅ] * TTjp[‚Ñì‚ÇÇ]) * (TEiq[‚Ñì‚ÇÅ] + TEiq[‚Ñì‚ÇÇ]) * Œû_TT(W2, w3j¬≤, ‚Ñì‚ÇÅ, ‚Ñì‚ÇÇ) +
                (TEjq[‚Ñì‚ÇÅ] + TEjq[‚Ñì‚ÇÇ]) * Œû_TT(W3, w3j¬≤, ‚Ñì‚ÇÅ, ‚Ñì‚ÇÇ)  * r_‚Ñì_ip[‚Ñì‚ÇÅ] * r_‚Ñì_ip[‚Ñì‚ÇÇ]  +
                (TEiq[‚Ñì‚ÇÅ] + TEiq[‚Ñì‚ÇÇ]) * Œû_TT(W4, w3j¬≤, ‚Ñì‚ÇÅ, ‚Ñì‚ÇÇ)  * r_‚Ñì_jp[‚Ñì‚ÇÅ] * r_‚Ñì_jp[‚Ñì‚ÇÇ]
            ) / 2

            ùêÇ[‚Ñì‚ÇÇ, ‚Ñì‚ÇÅ] = ùêÇ[‚Ñì‚ÇÅ, ‚Ñì‚ÇÇ]
        end
    end
end


function compute_coupled_covmat_TETE(workspace::CovarianceWorkspace{T}, spectra,
                                     noise_ratios; lmax=0) where {T <: Real}

    lmax = iszero(lmax) ? workspace.lmax : lmax
    i, j, p, q = workspace.field_names
    W = workspace.W_spectra

    r_TT_ip = noise_ratios[:TT, i, p]
    r_PP_jq = noise_ratios[:EE, j, q]

    ùêÇ = SpectralArray(zeros(T, (lmax+1, lmax+1)))
    loop_covTETE!(ùêÇ, lmax,
        spectra[:TT,i,p], spectra[:EE,j,q], spectra[:TE,i,q], spectra[:TE,j,p],
        r_TT_ip, r_PP_jq,
        window_function_W!(workspace, :‚àÖ‚àÖ, :‚àÖ‚àÖ, i, p, :TT, j, q, :PP),
        window_function_W!(workspace, :‚àÖ‚àÖ, :‚àÖ‚àÖ, i, q, :TP, j, p, :PT),
        window_function_W!(workspace, :‚àÖ‚àÖ, :PP, i, p, :TT, j, q, :PP),
        window_function_W!(workspace, :‚àÖ‚àÖ, :TT, j, q, :PP, i, p, :TT),
        window_function_W!(workspace, :TT, :PP, i, p, :TT, j, q, :PP))

    return ùêÇ
end


# inner loop
function loop_covTETE!(ùêÇ::SpectralArray{T,2}, lmax::Integer,
                       TTip::SpectralVector{T}, EEjq::SpectralVector{T},
                       TEiq::SpectralVector{T}, TEjp::SpectralVector{T},
                       r_TT_ip::SpectralVector{T}, r_PP_jq::SpectralVector{T},
                       W1, W2, W3, W4, W5) where {T}

    thread_buffers_0 = get_thread_buffers(T, 2*lmax+1)
    thread_buffers_2 = get_thread_buffers(T, 2*lmax+1)

    @qthreads for ‚Ñì‚ÇÅ in 2:lmax
        buffer0 = thread_buffers_0[Threads.threadid()]
        buffer2 = thread_buffers_2[Threads.threadid()]

        for ‚Ñì‚ÇÇ in ‚Ñì‚ÇÅ:lmax
            w00 = WignerF(T, ‚Ñì‚ÇÅ, ‚Ñì‚ÇÇ, 0, 0)  # set up the wigner recurrence
            w22 = WignerF(T, ‚Ñì‚ÇÅ, ‚Ñì‚ÇÇ, -2, 2)  # set up the wigner recurrence
            buffer_view_0 = uview(buffer0, 1:(w00.n‚Çò‚Çê‚Çì - w00.n‚Çò·µ¢‚Çô + 1))  # preallocated buffer
            buffer_view_2 = uview(buffer2, 1:(w22.n‚Çò‚Çê‚Çì - w22.n‚Çò·µ¢‚Çô + 1))  # preallocated buffer
            w3j_00 = WignerSymbolVector(buffer_view_0, w00.n‚Çò·µ¢‚Çô:w00.n‚Çò‚Çê‚Çì)
            w3j_22 = WignerSymbolVector(buffer_view_2, w22.n‚Çò·µ¢‚Çô:w22.n‚Çò‚Çê‚Çì)
            wigner3j_f!(w00, w3j_00)  # deposit symbols into buffer
            wigner3j_f!(w22, w3j_22)  # deposit symbols into buffer

            # varied over ‚Ñì‚ÇÉ
            w3j_00_22 = w3j_22  # buffer 2
            w3j_00_22.symbols .*= w3j_00.symbols   # buffer2 = (buffer 2) * (buffer 1)
            w3j_00_00 = w3j_00
            w3j_00_00.symbols .*= w3j_00.symbols # (buffer 1) = (buffer 1) * (buffer 1)


            ùêÇ[‚Ñì‚ÇÅ, ‚Ñì‚ÇÇ] = (
                sqrt(TTip[‚Ñì‚ÇÅ] * TTip[‚Ñì‚ÇÇ] * EEjq[‚Ñì‚ÇÅ] * EEjq[‚Ñì‚ÇÇ]) * Œû_TE(W1, w3j_00_22, ‚Ñì‚ÇÅ, ‚Ñì‚ÇÇ) +
                0.5 * (TEiq[‚Ñì‚ÇÅ] * TEjp[‚Ñì‚ÇÇ] + TEjp[‚Ñì‚ÇÅ] * TEiq[‚Ñì‚ÇÇ]) * Œû_TT(W2, w3j_00_00, ‚Ñì‚ÇÅ, ‚Ñì‚ÇÇ) +
                sqrt(TTip[‚Ñì‚ÇÅ] * TTip[‚Ñì‚ÇÇ]) * Œû_TE(W3, w3j_00_22, ‚Ñì‚ÇÅ, ‚Ñì‚ÇÇ) * r_PP_jq[‚Ñì‚ÇÅ] * r_PP_jq[‚Ñì‚ÇÇ] +
                sqrt(EEjq[‚Ñì‚ÇÅ] * EEjq[‚Ñì‚ÇÇ]) * Œû_TE(W4, w3j_00_22, ‚Ñì‚ÇÅ, ‚Ñì‚ÇÇ) * r_TT_ip[‚Ñì‚ÇÅ] * r_TT_ip[‚Ñì‚ÇÇ] +
                Œû_TE(W5, w3j_00_22, ‚Ñì‚ÇÅ, ‚Ñì‚ÇÇ) * r_TT_ip[‚Ñì‚ÇÅ] * r_TT_ip[‚Ñì‚ÇÇ] * r_PP_jq[‚Ñì‚ÇÅ] * r_PP_jq[‚Ñì‚ÇÇ]
            )

            ùêÇ[‚Ñì‚ÇÇ, ‚Ñì‚ÇÅ] = ùêÇ[‚Ñì‚ÇÅ, ‚Ñì‚ÇÇ]
        end
    end
end


function compute_coupled_covmat_TEEE(workspace::CovarianceWorkspace{T}, spectra,
                                     noise_ratios; lmax=0, planck=true) where {T <: Real}

    lmax = iszero(lmax) ? workspace.lmax : lmax
    i, j, p, q = workspace.field_names

    r_EE_jq = noise_ratios[:EE, j, q]
    r_EE_jp = noise_ratios[:EE, j, p]

    ùêÇ = SpectralArray(zeros(T, (lmax+1, lmax+1)))

    if planck
        loop_covTEEE_planck!(ùêÇ, lmax,
            spectra[:EE,j,q], spectra[:EE,j,p], spectra[:TE,i,p], spectra[:TE,i,q],
            r_EE_jq, r_EE_jp,
            window_function_W!(workspace, :‚àÖ‚àÖ, :‚àÖ‚àÖ, i, p, :TP, j, q, :PP),
            window_function_W!(workspace, :‚àÖ‚àÖ, :‚àÖ‚àÖ, i, q, :TP, j, p, :PP),
            window_function_W!(workspace, :‚àÖ‚àÖ, :PP, i, p, :TP, j, q, :PP),
            window_function_W!(workspace, :‚àÖ‚àÖ, :PP, i, q, :TP, j, p, :PP))
    else
        loop_covTEEE!(ùêÇ, lmax,
            spectra[:EE,j,q], spectra[:EE,j,p], spectra[:TE,i,p], spectra[:TE,i,q],
            r_EE_jq, r_EE_jp,
            window_function_W!(workspace, :‚àÖ‚àÖ, :‚àÖ‚àÖ, i, p, :TP, j, q, :PP),
            window_function_W!(workspace, :‚àÖ‚àÖ, :‚àÖ‚àÖ, i, q, :TP, j, p, :PP),
            window_function_W!(workspace, :‚àÖ‚àÖ, :PP, i, p, :TP, j, q, :PP),
            window_function_W!(workspace, :‚àÖ‚àÖ, :PP, i, q, :TP, j, p, :PP))
    end

    return ùêÇ
end


# inner loop
function loop_covTEEE!(ùêÇ::SpectralArray{T,2}, lmax::Integer,
                       EEjq::SpectralVector{T}, EEjp::SpectralVector{T},
                       TEip::SpectralVector{T}, TEiq::SpectralVector{T},
                       r_EE_jq::SpectralVector{T}, r_EE_jp::SpectralVector{T},
                       W1, W2, W3, W4) where {T}

    thread_buffers_0 = get_thread_buffers(T, 2*lmax+1)
    thread_buffers_2 = get_thread_buffers(T, 2*lmax+1)
    @qthreads for ‚Ñì‚ÇÅ in 2:lmax
        buffer0 = thread_buffers_0[Threads.threadid()]
        buffer2 = thread_buffers_2[Threads.threadid()]
        for ‚Ñì‚ÇÇ in ‚Ñì‚ÇÅ:lmax
            w00 = WignerF(T, ‚Ñì‚ÇÅ, ‚Ñì‚ÇÇ, 0, 0)  # set up the wigner recurrence
            w22 = WignerF(T, ‚Ñì‚ÇÅ, ‚Ñì‚ÇÇ, -2, 2)  # set up the wigner recurrence
            buffer_view_0 = uview(buffer0, 1:(w00.n‚Çò‚Çê‚Çì - w00.n‚Çò·µ¢‚Çô + 1))  # preallocated buffer
            buffer_view_2 = uview(buffer2, 1:(w22.n‚Çò‚Çê‚Çì - w22.n‚Çò·µ¢‚Çô + 1))  # preallocated buffer
            w3j_00 = WignerSymbolVector(buffer_view_0, w00.n‚Çò·µ¢‚Çô:w00.n‚Çò‚Çê‚Çì)
            w3j_22 = WignerSymbolVector(buffer_view_2, w22.n‚Çò·µ¢‚Çô:w22.n‚Çò‚Çê‚Çì)
            wigner3j_f!(w00, w3j_00)  # deposit symbols into buffer
            wigner3j_f!(w22, w3j_22)  # deposit symbols into buffer
            # varied over ‚Ñì‚ÇÉ
            w3j¬≤ = w3j_22  # buffer 2
            w3j¬≤.symbols .*= w3j_00.symbols   # buffer2 = (buffer 2) * (buffer 1)

            ùêÇ[‚Ñì‚ÇÅ, ‚Ñì‚ÇÇ] = (
                sqrt(EEjq[‚Ñì‚ÇÅ] * EEjq[‚Ñì‚ÇÇ]) * (TEip[‚Ñì‚ÇÅ] + TEip[‚Ñì‚ÇÇ]) * Œû_EE(W1, w3j¬≤, ‚Ñì‚ÇÅ, ‚Ñì‚ÇÇ) +
                sqrt(EEjp[‚Ñì‚ÇÅ] * EEjp[‚Ñì‚ÇÇ]) * (TEiq[‚Ñì‚ÇÅ] + TEiq[‚Ñì‚ÇÇ]) * Œû_EE(W2, w3j¬≤, ‚Ñì‚ÇÅ, ‚Ñì‚ÇÇ) +
                (TEip[‚Ñì‚ÇÅ] + TEip[‚Ñì‚ÇÇ]) * Œû_EE(W3, w3j¬≤, ‚Ñì‚ÇÅ, ‚Ñì‚ÇÇ) * r_EE_jq[‚Ñì‚ÇÅ] * r_EE_jq[‚Ñì‚ÇÇ] +
                (TEiq[‚Ñì‚ÇÅ] + TEiq[‚Ñì‚ÇÇ]) * Œû_EE(W4, w3j¬≤, ‚Ñì‚ÇÅ, ‚Ñì‚ÇÇ) * r_EE_jp[‚Ñì‚ÇÅ] * r_EE_jp[‚Ñì‚ÇÇ]
            ) / 2

            ùêÇ[‚Ñì‚ÇÇ, ‚Ñì‚ÇÅ] = ùêÇ[‚Ñì‚ÇÅ, ‚Ñì‚ÇÇ]
        end
    end
end


# inner loop
function loop_covTEEE_planck!(ùêÇ::SpectralArray{T,2}, lmax::Integer,
                              EEjq::SpectralVector{T}, EEjp::SpectralVector{T},
                              TEip::SpectralVector{T}, TEiq::SpectralVector{T},
                              r_EE_jq::SpectralVector{T}, r_EE_jp::SpectralVector{T},
                              W1, W2, W3, W4) where {T}

    thread_buffers = get_thread_buffers(T, 2 * lmax + 1)
    @qthreads for ‚Ñì‚ÇÅ in 2:lmax
        buffer = thread_buffers[Threads.threadid()]
        for ‚Ñì‚ÇÇ in ‚Ñì‚ÇÅ:lmax
            w = WignerF(T, ‚Ñì‚ÇÅ, ‚Ñì‚ÇÇ, -2, 2)  # set up the wigner recurrence
            buffer_view = uview(buffer, 1:length(w.n‚Çò·µ¢‚Çô:w.n‚Çò‚Çê‚Çì))  # preallocated buffer
            w3j¬≤ = WignerSymbolVector(buffer_view, w.n‚Çò·µ¢‚Çô:w.n‚Çò‚Çê‚Çì)
            wigner3j_f!(w, w3j¬≤)  # deposit symbols into buffer
            w3j¬≤.symbols .= w3j¬≤.symbols .^ 2  # square the symbols
            ùêÇ[‚Ñì‚ÇÅ, ‚Ñì‚ÇÇ] = (
                sqrt(EEjq[‚Ñì‚ÇÅ] * EEjq[‚Ñì‚ÇÇ]) * (TEip[‚Ñì‚ÇÅ] + TEip[‚Ñì‚ÇÇ]) * Œû_EE(W1, w3j¬≤, ‚Ñì‚ÇÅ, ‚Ñì‚ÇÇ) +
                sqrt(EEjp[‚Ñì‚ÇÅ] * EEjp[‚Ñì‚ÇÇ]) * (TEiq[‚Ñì‚ÇÅ] + TEiq[‚Ñì‚ÇÇ]) * Œû_EE(W2, w3j¬≤, ‚Ñì‚ÇÅ, ‚Ñì‚ÇÇ) +
                (TEip[‚Ñì‚ÇÅ] + TEip[‚Ñì‚ÇÇ]) * Œû_EE(W3, w3j¬≤, ‚Ñì‚ÇÅ, ‚Ñì‚ÇÇ) * r_EE_jq[‚Ñì‚ÇÅ] * r_EE_jq[‚Ñì‚ÇÇ] +
                (TEiq[‚Ñì‚ÇÅ] + TEiq[‚Ñì‚ÇÇ]) * Œû_EE(W4, w3j¬≤, ‚Ñì‚ÇÅ, ‚Ñì‚ÇÇ) * r_EE_jp[‚Ñì‚ÇÅ] * r_EE_jp[‚Ñì‚ÇÇ]
            ) / 2

            ùêÇ[‚Ñì‚ÇÇ, ‚Ñì‚ÇÅ] = ùêÇ[‚Ñì‚ÇÅ, ‚Ñì‚ÇÇ]
        end
    end
end


function compute_coupled_covmat_TTEE(workspace::CovarianceWorkspace{T}, spectra,
                                     noise_ratios; lmax=0) where {T <: Real}

    lmax = iszero(lmax) ? workspace.lmax : lmax
    i, j, p, q = workspace.field_names
    W = workspace.W_spectra

    ùêÇ = SpectralArray(zeros(T, (lmax+1, lmax+1)))
    loop_covTTEE!(ùêÇ, lmax,
        spectra[:TE,i,p], spectra[:TE,i,q], spectra[:TE,j,q], spectra[:TE,j,p],
        window_function_W!(workspace, :‚àÖ‚àÖ, :‚àÖ‚àÖ, i, p, :TP, j, q, :TP),
        window_function_W!(workspace, :‚àÖ‚àÖ, :‚àÖ‚àÖ, i, q, :TP, j, p, :TP),
    )

    return ùêÇ
end


# inner loop
function loop_covTTEE!(ùêÇ::SpectralArray{T,2}, lmax::Integer,
                       TEip::SpectralVector{T}, TEiq::SpectralVector{T},
                       TEjq::SpectralVector{T}, TEjp::SpectralVector{T},
                       W1, W2) where {T}

    thread_buffers = get_thread_buffers(T, 2 * lmax + 1)

    @qthreads for ‚Ñì‚ÇÅ in 2:lmax
        buffer = thread_buffers[Threads.threadid()]
        for ‚Ñì‚ÇÇ in ‚Ñì‚ÇÅ:lmax
            w = WignerF(T, ‚Ñì‚ÇÅ, ‚Ñì‚ÇÇ, 0, 0)  # set up the wigner recurrence
            buffer_view = uview(buffer, 1:length(w.n‚Çò·µ¢‚Çô:w.n‚Çò‚Çê‚Çì))  # preallocated buffer
            w3j¬≤ = WignerSymbolVector(buffer_view, w.n‚Çò·µ¢‚Çô:w.n‚Çò‚Çê‚Çì)
            wigner3j_f!(w, w3j¬≤)  # deposit symbols into buffer
            w3j¬≤.symbols .= w3j¬≤.symbols .^ 2  # square the symbols
            ùêÇ[‚Ñì‚ÇÅ, ‚Ñì‚ÇÇ] = (
                (TEip[‚Ñì‚ÇÅ] * TEjq[‚Ñì‚ÇÇ] + TEjq[‚Ñì‚ÇÅ] * TEip[‚Ñì‚ÇÇ]) * Œû_TT(W1, w3j¬≤, ‚Ñì‚ÇÅ, ‚Ñì‚ÇÇ) +
                (TEiq[‚Ñì‚ÇÅ] * TEjp[‚Ñì‚ÇÇ] + TEjp[‚Ñì‚ÇÅ] * TEiq[‚Ñì‚ÇÇ]) * Œû_TT(W2, w3j¬≤, ‚Ñì‚ÇÅ, ‚Ñì‚ÇÇ)
            ) / 2

            ùêÇ[‚Ñì‚ÇÇ, ‚Ñì‚ÇÅ] = ùêÇ[‚Ñì‚ÇÅ, ‚Ñì‚ÇÇ]
        end
    end
end
